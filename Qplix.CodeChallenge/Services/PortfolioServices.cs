using Models;
using Models.Responses;
using Qplix.CodeChallenge.Interfaces;

namespace Qplix.CodeChallenge.Services;

public class PortfolioServices : IPortfolioServices
{

    private readonly List<Investment> _investments;
    private readonly List<Transaction> _transactions;
    private readonly List<Quote> _quotes;
    private List<Transaction> _investmentsPercentages;
    private List<Transaction> _shares;


    public PortfolioServices(List<Transaction> transactions, List<Quote> quotes, List<Investment> investments,
        List<Transaction> investmentsPercentages, List<Transaction> shares)
    {
        _investments = investments;
        _transactions = transactions;
        _quotes = quotes;
        _investmentsPercentages = investmentsPercentages;
        _shares = shares;
    }

    public PortfolioTotalResponse GetPortfolioValue(DateTime date, string investmentId)
    {

        
        

    }

    public List<FoundValue> GetFoundsValuesByIds(List<string> ids, DateTime date)
    {
        var summedTransactions = _shares
            .Where(x => x.Date <= date)
            .GroupBy(x => x.InvestmentId)
            .Select(x => new { InvestmentId = x.Key, Value = x.Sum(i => i.Value) }).ToList();

        var investments = _investments.Where(x => ids.Contains(x.InvestorId)).ToList();

        var foundsGrouped = investments.GroupBy(x => new { FoundId = x.InvestorId, InvestmentId = x.InvestmentId });

        var investmentsIds = investments.Select(x => x.InvestmentId).Distinct().ToList();

        var transactions = summedTransactions.Where(x => investmentsIds.Contains(x.InvestmentId)).ToList();

        var query = from founds in foundsGrouped
            join Transaction in transactions
                on founds.Key.InvestmentId equals Transaction.InvestmentId
            select new
            {
                Transaction.InvestmentId,
                founds.Key.FoundId,
                Transaction.Value,
            };

        var foundsValues = query.GroupBy(x => x.FoundId)
            .Select(x => new FoundValue() { FoundId = x.Key, Value = x.Sum(i => i.Value) }).ToList();

    }






























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































    return foundsValues;
    }

    public decimal GetStockValue(decimal price, decimal amount)
    {
        return price * amount;
    }

    public PortfolioTotalResponse GetPortfolioValue(DateTime date, string InvestorId)
    {

        var totalInvestments = GetInvestments(InvestorId);

        var investmentIds = totalInvestments.Select(i => i.InvestmentId).ToList();

        var transactions = _transactions.Where(i => investmentIds.Contains(i.InvestmentId)).ToList();

        var stocks = GetStocksFromInvestments(totalInvestments);

        decimal totalInStocks = 0;

        stocks.ForEach(x =>
        {
            var isin = x.Isin;

            var amount = GetStockAmount(transactions, isin, date);

            if (amount <= 0) return;

            var price = GetStockPrice(isin, date);

            var total = GetStockValue(price, amount);

            totalInStocks += total;
        });

        var realStateIds = GetRealStateFromInvestments(totalInvestments).Select(x => x.InvestmentId).ToList();

        var realStateTransactions = GetRealStateTransactions(transactions, realStateIds);

        decimal realStateTotal = 0;

        realStateTransactions.ForEach(x => { realStateTotal += x.Value; });


        var founds = GetFondsFromInvestments(totalInvestments);

        var foundsInvestmentIds = founds.Select(i => i.InvestmentId).ToList();

        var foundsTransactions =
            _transactions.Where(i => foundsInvestmentIds.Contains(i.InvestmentId) && i.Date <= date).ToList();

        var foundsValues = foundsTransactions
            .GroupBy(i => i.InvestmentId).Select(x => new
            {
                InvesmentId = x.Key,
                Value = x.Sum(y => y.Value),
            });

        var foundsTotalValues = founds
            .GroupBy(x => new { FoundsInvestor = x.FoundsInvestor, InvestmentId = x.InvestmentId })
            .Select(x => new
            {
                FoundsInvestor = x.Key.FoundsInvestor,
                InvestmentId = x.Key.InvestmentId,
                Value = foundsValues.Where(y => y.InvesmentId == x.Key.InvestmentId).Sum(i => i.Value)
            }).ToList();

        var foundsTotalIds = foundsTotalValues.Select(i => i.FoundsInvestor).Distinct().ToList();
        
        
        
        var foundInvestors = _investments.Where(i => foundsTotalIds.Contains(i.InvestorId)).ToList();
        
        var foundsInvestorsInvestmentsIds = foundInvestors.Select(i => i.InvestmentId).ToList();
        
        var trans = _transactions.Where(i =>   i.Type=="Shares" && foundsInvestorsInvestmentsIds.Contains(i.InvestmentId)).ToList();
        
        
        
    decimal foundsTotal = 0;


        var foundsInvested = foundsTransactions
            .Where(i => i.Date <= date)
            .GroupBy(i => i.InvestmentId)
            .Select(x =>new { InvestmentId = x.Key, Value = x.Sum(i => i.Value) }).ToList();
        
    



        
        
        founds.ForEach(x =>
        {
            var percentageInvested = foundsInvested.Where(i => i.InvestmentId == x.InvestmentId).FirstOrDefault().Value;

            var foundValue = foundsTotalValues.Where(y => y.FoundsInvestor == x.FoundsInvestor).FirstOrDefault().Value;

            foundsTotal += GetFoundsPercentage(percentageInvested, foundValue);

        });

        return new PortfolioTotalResponse
        {
            TotalStocks = totalInStocks,
            TotalRealState = realStateTotal,
            TotalFounds = foundsTotal,
        };
    }

    public decimal GetFoundsPercentage(decimal percentage, decimal totalFound)
    {
        return percentage * totalFound;
    }
    
    public decimal GetFoundsInvestedByInvestmentId(List<Transaction> transactions,string InvestmentId, DateTime date)
    {
        var value = transactions.Where(x => x.InvestmentId == InvestmentId && x.Date <= date).Sum(x => x.Value);
        return value;
    }
    
    public decimal GetFoundsValue(string fondId)
    {
        var founds = _investments.Where(x => x.FoundsInvestor == fondId)
            .Select(x => x.InvestmentId).ToList();

        var transasctions = GetFoundsTransactions(founds);
        
        var total = transasctions.Sum(x => x.Value);

        return total;

    }

    public List<Transaction> GetFoundsTransactions(List<string> transactionIds)
    {
        var transactions = _transactions.Where(x => transactionIds.Contains(x.InvestmentId)).ToList();
        return transactions;
    }
    
    public List<Transaction> GetRealStateTransactions(List<Transaction> transactions, List<string> investmentIds)
    {
        return transactions.Where(x => investmentIds.Contains(x.InvestmentId)).ToList();
    }
    

   


    public List<Investment> GetInvestments(string InvestorId)
    {
        return _investments.Where(x=>x.InvestorId == InvestorId).ToList();
    }

    public List<Investment> GetStocksFromInvestments(List<Investment> investments)
    {
        return investments.Where(x => x.InvestmentType == InvestmentTypes.Stock).ToList();
    }
    
    public List<Investment> GetRealStateFromInvestments(List<Investment> investments)
    {
        return investments.Where(x => x.InvestmentType == InvestmentTypes.RealEstate).ToList();
    }
    
    public List<Investment> GetFondsFromInvestments(List<Investment> investments)
    {
        return investments.Where(x => x.InvestmentType == InvestmentTypes.Fonds).ToList();
    }
    
    
    
    public decimal GetStockAmount(List<Transaction> transactions, string investmentId, DateTime date)
    {
        var value = transactions.Where(x=>x.InvestmentId == investmentId && x.Date <= date)
            .GroupBy(t => t.InvestmentId)
            .Select(g => g.Sum(t => t.Value)).FirstOrDefault();
        return value;
    }


    public decimal GetStockPrice(string isin, DateTime date)
    {
        var price = _quotes.Where(x => x.Isin == isin && x.Date <= date)
            .OrderByDescending(x => x.Date)
            .First().PricePerShare;

        return price;
    }
    
    
    public List<Quote> GetStockPrices(string isin)
    {
        return _quotes.Where(x=> x.Isin == isin).ToList();  
    }
    
    
    public List<Transaction> GetStockTransactions(string investmentId)
    {
        
        var list = _transactions.Where(t => t.InvestmentId == investmentId).ToList();
        return list;
        
    }

    
    
    public List<Transaction> GetTransactions(DateTime date, string InvestorId)
    {
        
        var transactions = _transactions.Where(x=> x.InvestmentId == "Investment12537");
        
        
        return transactions.ToList();
        
    }
    
    
    public List<Investment> GetStocks()
    {
        return _investments.Where(x => x.InvestmentType == InvestmentTypes.Stock).ToList();
    }
    public List<string> GetInvestmentTypes()
    {
        var investmentTypes = _investments.GroupBy(i => i.InvestmentType).Select(i => i.Key.ToString()).ToList();
        return investmentTypes;
    }

    public List<Investment> GetInvestorInvestments(string InvestorId)
    {
        return _investments.Where(x => x.InvestorId == InvestorId).ToList();
    }


}